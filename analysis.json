{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "# Awesome! An h1 heading\n`<awesome-sauce>` injects a healthy dose of awesome into your page.\n## This is an h2 heading\nIn typical use, just slap some `<awesome-sauce>` at the top of your body:\n<body>\n  <awesome-sauce></awesome-sauce>\nWham! It's all awesome now!",
      "summary": "",
      "path": "awesome-sauce.js",
      "properties": [
        {
          "name": "isAwesome",
          "type": "boolean | null | undefined",
          "description": "Whether this element is currently awesome.\n\nDenote your property documentation with a JavaScript comment\npreceding the property declaration. The simplest property\ndocumentation can be a single line.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "sauce",
          "type": "{elements: Array.<HTMLElement>, level: number}",
          "description": "Metadata describing what has been made awesome on the page.\n\nIf the property doesn't specify a type, or that type is not\nprimitive, be sure to annotate the type properly. For example:",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 45,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_message",
          "type": "string | null | undefined",
          "description": "An awesome message.\n\n Private properties should be prefixed with an underscore (_).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 6
            },
            "end": {
              "line": 52,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "makeAwesome",
          "description": "Applies awesomeness to `element`.\n\nTo document functions, follow the property guidelines. Additionally,\nmake sure the types for all params and return values are documented.\n\nFor example:",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "The element to be made awesome."
            },
            {
              "name": "level",
              "type": "number",
              "description": "The numeric level of awesomeness. A value\n    between `1` and `11`."
            },
            {
              "name": "refs",
              "type": "Array.<HTMLElements>=",
              "description": "Optional referenced elements\n    that become awesome by proxy."
            }
          ],
          "return": {
            "type": "number",
            "desc": "The cumulative level of awesomeness."
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "/demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 88,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "AwesomeSauce",
      "attributes": [
        {
          "name": "is-awesome",
          "description": "Whether this element is currently awesome.\n\nDenote your property documentation with a JavaScript comment\npreceding the property declaration. The simplest property\ndocumentation can be a single line.",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 24
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "sauce",
          "description": "Metadata describing what has been made awesome on the page.\n\nIf the property doesn't specify a type, or that type is not\nprimitive, be sure to annotate the type properly. For example:",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 45,
              "column": 19
            }
          },
          "metadata": {},
          "type": "{elements: Array.<HTMLElement>, level: number}"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "awesome-change",
          "description": "Fired when `element` changes its awesomeness level.\n\nEvents must be annotated explicitly with an @event tag.\n\nEvent properties are documented with the @param tag, just like\nmethod parameters.\n\nFor example:",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "awesome-sauce"
    }
  ]
}
